//MAXIMUM CONS ONES
class Solution {
    public int findMaxConsecutiveOnes(int[] nums) {
        int curCount = 0; int max = 0;
        for(int i = 0; i < nums.length; i++){
            if(nums[i] == 1){
                curCount++;
                max = max > curCount ? max : curCount;
            }else{
                curCount = 0;
            }
        }
        return max;
}}

//MAXISUBARRAY
class Solution {
    public int lengthOfLongestSubstring(String s) {
         if (s.length()==0) return 0;
        HashMap<Character, Integer> map = new HashMap<Character, Integer>();
        int max=0;
        for (int i=0, j=0; i<s.length(); ++i){
            if (map.containsKey(s.charAt(i))){
                j = Math.max(j,map.get(s.charAt(i))+1);
            }
            map.put(s.charAt(i),i);
            max = Math.max(max,i-j+1);
        }
        return max;
    }
}

/REMDUPLICATES
class Solution {
    public int removeDuplicates(int[] nums) {
        int picker = 0;
    for (int i = 1; i < nums.length; i++) if (nums[i] != nums[picker]) nums[++picker] = nums[i];
    return nums.length == 0 ? 0 : picker + 1;
    }
}
